from sqlalchemy.orm import declarative_base, Session
from sqlalchemy.orm import relationship
from sqlalchemy import Column
from sqlalchemy import create_engine
from sqlalchemy import ForeignKey
from sqlalchemy import String
from sqlalchemy import Integer
from sqlalchemy import select

Base = declarative_base()


class User(Base):
    __tablename__ = "user_account"

    id = Column(Integer, primary_key=True)
    name = Column(String)
    fullname = Column(String)

    address = relationship(
        "Address", back_populates="user"
    )

    def __repr__(self):
        return f"User(id={self.id}, name={self.name}, fullname={self.fullname})"


class Address(Base):
    __tablename__ = "address"
    id = Column(Integer, primary_key=True)
    email_address = Column(String(30), nullable=False)
    user_id = Column(Integer, ForeignKey("user_account.id"), nullable=False)

    user = relationship("User", back_populates="address")

    def __repr__(self):
        return f"Address(id={self.id}, email_address={self.email_address})"


print(User.__tablename__)

print(Address.__tablename__)

engine = create_engine("sqlite://")

Base.metadata.create_all(engine)

print(engine)

with Session(engine) as session:
    juliana = User(
        name='Juliana Souza',
        address=[Address(email_address="ju@email.com")]
    )

    ANA = User(
        name='ana ferreira',
        address=[Address(email_address="ana@email.com")]
    )
    marcelo = User(
        name='marcelo',
        address=[Address(email_address="marcelo@email.com")]
    )

session.add_all([juliana, ANA])
session.commit()

# noinspection PyArgumentList


stmt = select(User).where(User.name.in_(["Juliana", 'ANA']))
print("\nRecuperando usuário a partiar de condição de filtragem")
for user in session.scalars(stmt):
    print(user)

# noinspection PyArgumentList
stmt_address = select(Address).where(Address.user_id.in_([2]))
print("\nRecuperando entered de email")
for address in session.scalars(stmt_address):
    print(address)

# noinspection PyArgumentList
stmt_order = select(User).order_by(User.fullname.desc())
print("\nRecuperando information de maneira ordenada")
for result in session.scalars(stmt_order):
    print(result)

session.close()
